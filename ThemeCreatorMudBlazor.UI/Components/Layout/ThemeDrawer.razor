@inject IThemeCreatorService ThemeService
@inject IThemeStateService ThemeState
@inject IDialogService DialogService

    <MudDrawer @bind-Open="IsDrawerOpen" ClipMode="DrawerClipMode.Docked" Width="300px"
               Elevation="2" Variant="DrawerVariant.Persistent">
        <div class="ml-2 mt-2 mb-2" style="text-align: center;">
            <MudSelect T="int" Value="@SelectedTheme" ValueChanged="@ToggleTheme" Placeholder="Select a Pre-Built Theme" Label="AVAILABLE THEMES">
                <MudSelectItem Value="-1">
                    <MudTooltip Arrow="true" Placement="Placement.Right" Text="@SelectedThemeOtherText">
                        @SelectedThemeName
                    </MudTooltip>
                </MudSelectItem>
                @foreach (CustomTheme customTheme in _customThemes)
                {
                    <MudSelectItem T="int" Value="@customTheme.Id">
                        <MudTooltip Arrow="true" Placement="Placement.Right" Text="@customTheme.OtherText">
                            @customTheme.Name
                        </MudTooltip>
                    </MudSelectItem>
                }
            </MudSelect>
            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudButton OnClick="@(() => ToggleDark())" Class="mt-2"
                           StartIcon="@(!IsDarkMode ? Icons.Material.Outlined.WbSunny : Icons.Material.Outlined.NightsStay)">
                    @(!IsDarkMode ? "Light Mode" : "Dark Mode")
                </MudButton>
                <MudTooltip Text="Reset All Theme Values">
                    <MudButton Class="mt-2" StartIcon="@Icons.Material.Outlined.Refresh" OnClick="@ResetTheme"/>
                </MudTooltip>
            </MudStack>
            <!-- div to take up remaining vh and allow scrolling -->
            <div style="overflow-y: auto; height: 85vh;">
                <ThemePanels @ref="_themePanelComponent" ThemeId="@SelectedTheme"/>
            </div>
        </div>
    </MudDrawer>

@code {
    [Parameter]
    public bool IsDarkMode { get; set; }
    [Parameter]
    public EventCallback<bool> IsDarkModeChanged { get;set; }
    [Parameter]
    public bool IsDrawerOpen { get; set; }
    [Parameter]
    public EventCallback<bool> IsDrawerOpenChanged { get; set; }
    [Parameter]
    public int SelectedTheme { get; set; } = 1;

    ThemePanels _themePanelComponent = default!;
    private List<CustomTheme> _customThemes = [];
    private string SelectedThemeName => ThemeState.ThemeName.Length > 0 ?
                                            ThemeState.ThemeName :
                                            "Last Modified Theme";
    private string SelectedThemeOtherText => ThemeState.ThemeOtherText.Length > 0 ?
                                            ThemeState.ThemeOtherText :
                                            "Last known state of the theme you have been working with. Saves from session to session.";
    protected override async Task OnInitializedAsync()
    {
        _customThemes = await ThemeService.GetCustomThemesAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        _customThemes = await ThemeService.GetCustomThemesAsync();
        StateHasChanged();
    }

    public async Task ToggleDark()
    {
        await IsDarkModeChanged.InvokeAsync(!IsDarkMode);
    }

    public async Task ToggleDrawer()
    {
        await IsDrawerOpenChanged.InvokeAsync(!IsDrawerOpen);
    }

    private async Task ResetTheme()
    {
        var parameters = new DialogParameters();
        var dialogOptions = new DialogOptions { CloseButton = false, CloseOnEscapeKey = false, BackdropClick = false };
        var dialogRef = await DialogService.ShowAsync<ConfirmDialog>("Reset Theme", parameters, dialogOptions);

        var result = await dialogRef.Result;
        var confirmed = result is { Canceled: false, Data: true };
        if (confirmed)
        {
            await ThemeState.ResetTheme();
            await _themePanelComponent.ResetTheme();
            StateHasChanged();
        }
    }

    private async Task ToggleTheme(int themeId)
    {
        SelectedTheme = themeId;
        await Task.Delay(1);
        StateHasChanged();
        await ThemeState.UpdateThemeId(themeId, true, true);        
    }
}
