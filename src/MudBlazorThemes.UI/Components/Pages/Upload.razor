@page "/upload"
@using System.Security.Cryptography
@using System.Text
@using System.Diagnostics
@inject ISnackbar Snackbar
@inject IThemeCreatorService themeService
@inject IThemeStateService themeState

<PageTitle>MudBlazor Theme Manager Creator CSS Upload Section</PageTitle>
<HeadContent>
    <meta name="description" content="Where a dev can upload a Bootswatch theme into MudBlazor Theme Creator." />
    <meta property="og:description" content="Where a dev can upload a Bootswatch theme into MudBlazor Theme Creator." />
</HeadContent>
<MudText Typo="Typo.h3">CSS Upload Section</MudText>
<br />
<MudText Typo="Typo.body1">
    Welcome<b>@($" {UserName}")</b>,<br />Please upload a Bootswatch CSS file or a MudBlazor CS theme file no larger than 1MB here to create a potential new theme or save a theme to your account.
</MudText>
<br />

<MudFileUpload T="IBrowserFile" FilesChanged="UploadFile" Required Accept="@string.Join(",", AllowedExtensions)">
    <ActivatorContent>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">Upload Text File</MudButton>
    </ActivatorContent>
</MudFileUpload>

<MudText Class="mt-4">
    Bootswatch uploading is not perfect, Very little typography and layout property information is gathered and Zindex is complete ignored. <br/>
    Not all themes are compatible, the uploader accepts version 7.xx MudBlazor Themes and 8.xx MudBlazor Themes. It will only pick up the first theme in a multi theme file.
</MudText>
<br />
<AuthorizeView>
    <Authorized>
        <MudForm @ref="_saveForm" @bind-IsValid="@_success">
            <MudCard Style="max-width: 800px;">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Save Theme</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        @* <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" /> *@
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Class="mt-n4">
                    <MudText>Save this theme to the database for later use.</MudText>
                    <MudText class="mb-4" Typo="Typo.body2" HtmlTag="p">
                        By default saved themes are only available to the account they are saved to. At site owner discression
                        it may be activated for public use. You can create an issue on GitHub if you would like this to happen sooner.
                        If the current theme has not been modified it cannot be saved.
                    </MudText>
                    <MudText>Theme ID: <b>@_themeId@if (_isModified)
                            {
                                <sup style="color: red; font-weight: bolder;" data-tooltip="Modified">*&nbsp;</sup>
                            }</b>
                    </MudText>
                    <MudTextField Label="Theme Name" @bind-Value="_themeName" Required Validation="@(MaxLengthNameValidation)" HelperText="5-30 Characters" />
                    <MudTextField AutoGrow Class="mb-2" Label="Theme Other Text" HelperText="5-175 Characters" @bind-Value="_themeOtherText" Required Validation="@(MaxLengthOtherValidation)" />
                </MudCardContent>
                <MudCardActions>
                    <MudTooltip Text="Saving a theme will create a new theme for your account unless you are the owner. You can only have 5 themes per account.">
                        <MudButton Variant="Variant.Text" Color="Color.Primary" Disabled="@(!_success || !themeState.IsModified)" OnClick="SaveTheme">
                            Save Theme
                        </MudButton>
                        <sup class="ml-n2" style="color: red; font-weight: bolder;">*&nbsp;</sup>
                    </MudTooltip>
                </MudCardActions>
            </MudCard>
        </MudForm>
    </Authorized>
</AuthorizeView>

<AuthorizeView Roles="SuperUser">
    <MudStack Row AlignItems="AlignItems.Center">
        <MudSwitch Label="Approved" Value="@_approved" ValueChanged="@((bool val) => ApproveChanged(val))" />
        <MudIconButton Icon="@Icons.Material.Filled.Save" Disabled="@(_disabledApprove || !_success)" />
    </MudStack>
</AuthorizeView>

@code {
    readonly string[] AllowedExtensions = { ".css","*.cs" };
    const long MaxFileSize = 1024 * 1024; // 1MB in bytes
    private bool _approved;
    private bool _disabledApprove = true;
    private bool _success;
    private string _themeName = string.Empty;
    private string _themeOtherText = string.Empty;
    private int _themeId;
    private bool _isModified;
    private MudForm? _saveForm;

    [CascadingParameter(Name = "UserName")]
    public string UserName { get; set; } = string.Empty;

    [CascadingParameter(Name = "SuperUser")]
    public bool SuperUser { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        themeState.OnChange += ModifiedChanged;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            UpdateTheme();            
        }
        if (_themeId != themeState.ThemeId)
        {
            UpdateTheme();
        }
        _saveForm?.Validate();
    }

    private void UpdateTheme()
    {
        _themeName = themeState.ThemeName;
        _themeOtherText = themeState.ThemeOtherText;
        _themeId = themeState.ThemeId;
        _isModified = themeState.IsModified;
        StateHasChanged();
    }

    private void ApproveChanged(bool val)
    {
        _approved = val;
        _disabledApprove = false;
    }

    private IEnumerable<string> MaxLengthNameValidation(string val)
    {
        if (string.IsNullOrWhiteSpace(val))
        {
            yield return "Name is required.";
            yield break;
        }
        if (val.Length < 5)
        {
            yield return "Name must be at least 5 characters.";
        }
        if (val.Length > 30)
        {
            yield return "Name cannot be more than 30 characters.";
        }
    }

    private IEnumerable<string> MaxLengthOtherValidation(string val)
    {
        if (string.IsNullOrWhiteSpace(val))
        {
            yield return "Other Text is required.";
            yield break;
        }
        if (val.Length < 5)
        {
            yield return "Other Text must be at least 5 characters.";
        }
        if (val.Length > 199)
        {
            yield return "Other Text cannot be more than 175 characters.";
        }
    }

    private async Task UploadFile(IBrowserFile file)
    {
        if (file == null)
            return;

        if (file.Size > MaxFileSize)
        {
            ShowNotification("File size exceeds the 1MB limit.", Severity.Warning);
            return;
        }

        var fileExtension = Path.GetExtension(file.Name).ToLowerInvariant();
        if (!AllowedExtensions.Contains(fileExtension))
        {
            ShowNotification("Only css files (.css) are allowed.", Severity.Warning);
            return;
        }

        try
        {
            // Read the content of the file
            var fileContent = await new StreamReader(file.OpenReadStream()).ReadToEndAsync();
            if (fileContent.Length > 0)
            {
                ShowNotification("File loaded successfully, processing...", Severity.Success);
                (string themeName, string otherText, List<ThemeSelection> themeSelections, List<CustomShadow> customShadows,
                    List<CustomLayoutProperty> customLayoutProperties, List<CustomTypography> customTypographies, List<CustomZIndex> customZIndices)
                    themeStatus = await themeService.ImportBootswatchTheme(fileContent);
                await themeState.ResetTheme();
                await themeState.UpdateThemeData(themeStatus.themeSelections, true, true);
                await themeState.UpdateThemeData(themeStatus.customShadows, true, true);
                await themeState.UpdateThemeData(themeStatus.customLayoutProperties, true, true);
                await themeState.UpdateThemeData(themeStatus.customTypographies, true, true);
                await themeState.UpdateThemeData(themeStatus.customZIndices, true, true);
                themeState.ThemeName = themeStatus.themeName;
                themeState.ThemeOtherText = themeStatus.otherText;
                themeState.IsModified = true;                
                themeState.CustomThemes.Add(
                    new CustomTheme
                    {
                         IsActive = true,
                         CreatedWhen = DateTime.Now,
                         Id = 0,
                         Name = string.IsNullOrWhiteSpace(themeStatus.themeName) ? "*Uploaded Theme" : themeStatus.themeName,
                         OtherText = string.IsNullOrWhiteSpace(themeStatus.otherText) ? "*Uploaded Theme" : themeStatus.otherText,
                         UploadedBy = UserName
                    });
                await themeState.UpdateThemeId(0,true,true);
                _saveForm?.Validate();
                ShowNotification($"{themeStatus.themeName} imported successfully, don't forget to save it!", Severity.Success);
            }
            else
            {
                ShowNotification($"Upload failed", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            ShowNotification($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

    private async Task SaveTheme()
    {
        var result = await themeService.SaveTheme(themeState);
        if (result > 0)
        {
            themeState.CustomThemes = await themeService.GetCustomThemesAsync();
            await themeState.ResetTheme();
            await themeState.UpdateThemeId(result, false, true);
            Snackbar.Add("Theme Saved Successfully", Severity.Success);
        }
        else
        {
            Snackbar.Add("Theme Save Failed", Severity.Error);
        }
    }

    private void ShowNotification(string message, Severity severity)
    {
        Snackbar.Add(message, severity);
    }

    private void ModifiedChanged()
    {
        _themeId = themeState.ThemeId;
        _isModified = themeState.IsModified;
        if (string.IsNullOrWhiteSpace(_themeName))
            _themeName = themeState.ThemeName;
        if (string.IsNullOrWhiteSpace(_themeOtherText))
            _themeOtherText = themeState.ThemeName;
        StateHasChanged();
        _saveForm?.Validate();
    }

    private void Dispose()
    {
        themeState.OnChange -= ModifiedChanged;
    }
}
